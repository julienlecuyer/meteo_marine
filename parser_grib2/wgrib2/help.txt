wgrib2 v0.2.0.3 11/2015 Wesley Ebisuzaki, Reinoud Bokhorst, John Howard, Jaakko Hyv√§tti, Dusan Jovic, Kristian Nilssen, Karl Pfeiffer, Pablo Romero, Manfred Schwarb, Arlindo da Silva, Niklas Sondell, Sergey Varlamov
   stock build
 -0xSec           inv  X      Hex dump of section X (0..8)
 -aerosol_size    inv         optical properties of an aerosol
 -aerosol_wavelength inv         optical properties of an aerosol
 -bitmap          inv         bitmap mode
 -center          inv         center
 -checksum        inv  X      CRC checksum of section X (0..8), whole message (X = -1/message) or (X=data)
 -code_table_0.0  inv         code table 0.0 discipline
 -code_table_1.0  inv         code table 1.0 master table version
 -code_table_1.1  inv         code table 1.1 local table version
 -code_table_1.2  inv         code table 1.2 significance of reference time
 -code_table_1.3  inv         code table 1.3 production status of processed data
 -code_table_1.4  inv         code table 1.4 type of processed data
 -code_table_1.5  inv         Identification template number
 -code_table_1.6  inv         calendar
 -code_table_3.0  inv         code table 3.0 Source of grid definition
 -code_table_3.1  inv         code table 3.1 Grid definition template number
 -code_table_3.11 inv         code table 3.11 regional/global thinned/reduced grid
 -code_table_3.15 inv         code table 3.15 Physical meaning of vertical coordinate
 -code_table_3.2  inv         code table 3.2 Size (radius) and Shape of Earth
 -code_table_3.20 inv         code table 3.20 Type of Horizontal line
 -code_table_3.21 inv         code table 3.21 Vertical Dimension coordinate values defn
 -code_table_3.6  inv         code table 3.6 Spectral data representation type
 -code_table_3.7  inv         code table 3.7 Spectral data representation mode
 -code_table_3.8  inv         code table 3.8 Grid point position
 -code_table_4.0  inv         code table 4.0 Product Definition Template Number
 -code_table_4.1  inv         code table 4.1
 -code_table_4.10 inv         code table 4.10 statistical processing
 -code_table_4.11 inv         code table 4.11 (first) type of time intervals
 -code_table_4.11s inv         code table 4.11 (all) type of time intervals
 -code_table_4.15 inv         code table 4.15 type of areal statistical processing
 -code_table_4.2  inv         code table 4.2
 -code_table_4.230 inv         code table 4.230 chemical constituent type
 -code_table_4.233 inv         code table 4.233 aerosol type
 -code_table_4.235 inv         code table 4.235 Wind-generated wave spectral description
 -code_table_4.3  inv         code table 4.3 Type of Generating Process
 -code_table_4.4  inv         code table 4.4
 -code_table_4.5a inv         code table 4.5 (1st value)
 -code_table_4.5b inv         code table 4.5 (2nd value)
 -code_table_4.6  inv         code table 4.6 ensemble type
 -code_table_4.7  inv         code table 4.7 derived forecast
 -code_table_4.8  inv         code table 4.7 derived forecast
 -code_table_4.9  inv         code table 4.9 Probability Type
 -code_table_4.91 inv         code table 4.91 type of interval
 -code_table_4.91b inv         code table 4.91 type of interval (2nd copy)
 -code_table_5.0  inv         code table 5.0 data representation number
 -code_table_5.1  inv         code table 5.1 type of original field values
 -code_table_5.4  inv         code table 5.4 group splitting method
 -code_table_5.5  inv         code table 5.5 missing value management for complex packing
 -code_table_5.6  inv         code table 5.5 complex packing spatial differencing
 -code_table_5.7  inv         code table 5.7 precision in IEEE packing
 -code_table_6.0  inv         code table 6.0 Bitmap indicator
 -ctl_ens         inv         ens info for g2ctl/GrADS
 -ctl_inv         inv         ctl inventory dump for g2ctl/GrADS
 -cyclic          inv         is grid cyclic? (not for for mercator and thinned grids)
 -disc            inv         discipline (code table 0.0)
 -domain          inv         find rectangular domain for g2ctl/GrADS plots
 -end_ft          inv         verf time = reference_time + forecast_time + stat. proc time (YYYYMMDDHH) (same as -vt)
 -end_FT          inv         verf time = reference_time + forecast_time + stat. proc time (YYYYMMDDHHMMSS) (same as -VT)
 -ens             inv         ensemble information
 -ext_name        inv         extended name, var+qualifiers
 -flag_table_3.10 inv         flag table 3.10 scanning mode for one diamond
 -flag_table_3.3  inv         flag table 3.3, resolution and component flags
 -flag_table_3.4  inv         flag table 3.4, scanning mode
 -flag_table_3.5  inv         flag table 3.5 projection center
 -flag_table_3.9  inv         flag table 3.9 numbering order of diamonds seen from corresponding pole
 -ftime           inv         forecast time
 -ftn_api_fn0     inv         n npnts nx ny msg_no submsg i8,5(1x,i8)
 -full_name       inv         extended name, var+qualifiers
 -gdt             inv         contents of Grid Definition Template (g2c)
 -get_byte        inv  X Y Z  get bytes in Section X, Octet Y, number of bytes Z (decimal format)
 -get_hex         inv  X Y Z  get bytes in Section X, Octet Y, number of bytes Z (bytes in hexadecimal format)
 -get_ieee        inv  X Y Z  get ieee float in Section X, Octet Y, number of floats Z
 -get_int         inv  X Y Z  get 4-byte ints in Section X, Octet Y, number of ints Z
 -get_int2        inv  X Y Z  get 2-byte ints in Section X, Octet Y, number of ints Z
 -grid            inv         grid definition
 -grid_id         inv         show values from grid_id
 -hybrid          inv         shows vertical coordinate parameters from Sec4
 -ij              inv  X Y    value of field at grid(X,Y) X=1,..,nx Y=1,..,ny (WxText enabled)
 -ijlat           inv  X Y    lat,lon and grid value at grid(X,Y) X=1,..,nx Y=1,..,ny (WxText enabled)
 -ilat            inv  X      lat,lon and grid value at Xth grid point, X=1,..,npnts (WxText enabled)
 -lev             inv         level (code table 4.5)
 -lev0            inv         level for g2ctl/GrADS
 -ll2i            inv  X Y    x=lon y=lat, converts to (i)
 -ll2ij           inv  X Y    x=lon y=lat, converts lon-lat (i,j)
 -lon             inv  X Y    value at grid point nearest lon=X lat=Y (WxText enabled)
 -match_inv       inv         inventory used by -match, -not, -if and -not_if
 -max             inv         print maximum value
 -min             inv         print minimum value
 -misc            inv         variable name qualifiers like chemical, ensemble, probability, etc
 -MM              inv         reference time MM
 -model_version_date inv         prints model date code
 -n               inv         prints out inventory number
 -N_ens           inv         number of ensemble members
 -nl              inv         inserts new line into inventory
 -nlons           inv         number of longitudes for each latitude
 -npts            inv         number of grid points
 -nxny            inv         nx and ny of grid
 -packing         inv         shows the packing mode (use -v for more details)
 -pds_fcst_time   inv         fcst_time(1) in units given by pds
 -pdt             inv         Product Definition Table (Code Table 4.0)
 -percent         inv         percentage probability
 -print           inv  X      inserts string (X) into inventory
 -prob            inv         probability information
 -process         inv         Process (code table 4.3)
 -processid       inv         process id (locally defined)
 -proj4_ij2ll     inv  X Y    X=x Y=y, converts to (i,j) to lon-lat using proj.4 (experimental) we:sn
 -proj4_ll2i      inv  X Y    x=lon y=lat, converts to (i) using proj.4 (experimental)
 -proj4_ll2ij     inv  X Y    x=lon y=lat, converts lon-lat (i,j) using proj.4 (experimental)
 -radius          inv         radius of Earth
 -range           inv         print out location of record in bytes, 0 = first byte
 -RT              inv         type of reference Time
 -s               inv         simple inventory
 -S               inv         simple inventory with minutes and seconds (subject to change)
 -scale           inv         scale for packing
 -scaling         inv         scaling for packing (old format)
 -scan            inv         scan order of grid
 -Sec0            inv         contents of section0
 -Sec3            inv         contents of section 3 (Grid Definition Section)
 -Sec4            inv         Sec 4 values (Product definition section)
 -Sec5            inv         Sec 5 values (Data representation section)
 -Sec6            inv         show bit-map section
 -Sec_len         inv         length of various grib sections
 -spatial_proc    inv         show spacial processing, pdt=4.15
 -spectral        inv         show spectral bands
 -spectral_bands  inv         spectral bands for satellite, pdt=4.31
 -start_ft        inv         verf time = reference_time + forecast_time (YYYYMMDDHH) : no stat. proc time
 -start_FT        inv         verf time = reference_time + forecast_time (YYYYMMDDHHMMSS) - no stat. proc time
 -stats           inv         statistical summary of data values
 -subcenter       inv         subcenter
 -t               inv         reference time YYYYMMDDHH, -v2 for alt format
 -T               inv         reference time YYYYMMDDHHMMSS
 -table           inv         parameter table
 -unix_time       inv         print unix timestamp for rt & vt
 -V               inv         diagnostic output
 -var             inv         short variable name
 -varX            inv         raw variable name - discipline mastertab localtab center parmcat parmnum
 -vector_dir      inv         grid or earth relative winds
 -verf            inv         simple inventory using verification time
 -vt              inv         verf time = reference_time + forecast_time, -v2 for alt format
 -VT              inv         verf time = reference_time + forecast_time (YYYYMMDDHHMMSS)
 -wave_partition  inv         ocean surface wave partition (pdt=52)
 -YY              inv         reference time YYYY
 -inv_f77         inv> X Y Z  match inventory written to Z with character*(Y) and X=(bin,ieee)
 -last            inv> X      write last inv item to file X
 -last0           inv> X      write last inv item to beginning of file X
 -nl_out          inv> X      write new line in file X
 -print_out       inv> X Y    prints string (X) in file (Y)
 -s_out           inv> X      simple inventory written to X
 -big_endian      misc        sets ieee output to big endian (default is big endian)
 -colon           misc X      replace item deliminator (:) with X
 -config          misc        shows the configuration
 -count           misc        prints count, number times this -count was processed
 -end             misc        stop after first (sub)message (save time)
 -error_final     misc X Y Z  error if at end X=count Y=ne,eq,le,lt,gt,ge Z=integer
 -fix_CFSv2_fcst  misc X Y Z  fixes CFSv2 monthly fcst X=daily or 00/06/12/18 Y=pert no. Z=number ens fcsts v1.0
 -fix_ncep        misc        fix ncep PDT=8 headers produced by cnvgrib
 -gctpc           misc X       X=0,1 use gctpc library (testing)
 -grid_changes    misc        prints number of grid changes
 -grid_def        misc        read lon and lat data from grib file -- experimental
 -h               misc        help, shows common options
 -header          misc        f77 header or nx-ny header in text output (default)
 -help            misc X      help [search string|all], -help all, shows all options
 -if              misc X      if X (POSIX regular expression) matches, conditional execution up to next output/fi
 -if_fs           misc X      if X (fixed string) matches, conditional execution up to next output/fi
 -if_n            misc X      if (inv numbers in range), X=(start:end:step)
 -if_rec          misc X      if (record numbers in range), X=(start:end:step)
 -if_reg          misc X      if rpn registers defined, X = A, A:B, A:B:C, etc A = register number
 -ijundefine      misc X Y Z  sets grid point values to undefined X=(in-box|out-box) Y=ix0:ix1 Z=iy0:iy1 ix=(1..nx) iy=(1..ny)
 -import_bin      misc X      read binary file (X) for data
 -import_grib     misc X      read grib2 file (X) for data
 -import_ieee     misc X      read ieee file (X) for data
 -import_text     misc X      read text file (X) for data
 -limit           misc X      stops after X fields decoded
 -little_endian   misc        sets ieee output to little endian (default is big endian)
 -mem_del         misc X      delete mem file X
 -mem_final       misc X Y    write mem file X to file Y at cleanup step
 -mem_init        misc X Y    read mem file X from file Y (on initialization)
 -new_grid_interpolation misc X      new_grid interpolation X=bilinear,bicubic,neighbor,budget
 -new_grid_ipopt  misc X      new_grid ipopt values X=i1:i2..:iN N <= 20
 -new_grid_vectors misc X      change fields to vector interpolate: X=none,default,UGRD:VGRD,(U:V list)
 -new_grid_winds  misc X      new_grid wind orientation: X = grid, earth (no default)
 -no_header       misc        no f77 header or nx-ny header in text output
 -not_if          misc X      if X (regular expression) does not match, conditional execution until next output/fi
 -not_if_fs       misc X      if X (fixed string) does not match, conditional execution up to next output/fi
 -proj4           misc X      X=0,1 use proj4 library for geolocation (testing)
 -quit            misc        stop after first (sub)message (save time)
 -rewind_final    misc X      rewinds file X on cleanup step if already opened, CW2
 -rewind_proc     misc X      rewinds file X on processing step if already opened, CW2
 -rpn             misc X      reverse polish notation calculator
 -set             misc X Y    set X = Y, X=local_table,etc (help: -set help help)
 -set_ave         misc X      set ave/acc .. only on pdt=4.0 only anl/fcst
 -set_bin_prec    misc X      X set number of binary bits for grib_out packing
 -set_bitmap      misc X      use bitmap when creating complex packed files X=1/0
 -set_byte        misc X Y Z  set bytes in Section X, Octet Y, bytes Z (a|a:b:c)
 -set_center      misc X      changes center X = C or C:S C and S are center/subcenter numbers
 -set_date        misc X      changes date code .. keep old date code if not specified completely
 -set_ensm_derived_fcst misc X Y    convert PDT 0,1,2 -> 2, 8,11,12 -> 12, X=code table 4.7 Y=num ens members
 -set_ens_num     misc X Y Z  convert PDT 0,1 -> 1, 8,11 -> 11, X=code table 4.6 Y=pert num Z=num ens members -1=No Change
 -set_flag_table_3.3 misc X      flag table 3.3 = X
 -set_flag_table_3.4 misc X      flag table 3.4 = X
 -set_ftime       misc X      set ftime
 -set_grib_max_bits misc X      sets scaling so number of bits does not exceed N in (new) grib output
 -set_grib_type   misc X      set grib type = jpeg, simple, ieee, complex(1|2|3), same
 -set_hex         misc X Y Z  set bytes in Section X, Octet Y, bytes Z (a|a:b:c) in hexadecimal
 -set_ieee        misc X Y Z  set ieee float in Section X, Octet Y, floats Z (a|a:b:c)
 -set_ijval       misc X Y Z  sets grid point value X=ix Y=iy Z=val
 -set_int         misc X Y Z  set 4-byte ints in Section X, Octet Y, signed integers Z (a|a:b:c)
 -set_int2        misc X Y Z  set 2-byte ints in Section X, Octet Y, signed integers Z (a|a:b:c)
 -set_ival        misc X Y    sets grid point value X=i1:i2:.. Y=va1:val2:.. grid[i1] = val1,etc
 -set_lev         misc X      changes level code .. not complete
 -set_metadata    misc X      read meta-data for grib writing from file X
 -set_metadata_str misc X      X = metadata string
 -set_pdt         misc X      makes new (clean) pdt, X=PDT_number or X=PDT_number:size of PDT in octets
 -set_percentile  misc X      convert PDT 0..6 -> 6, 8..15 -> 10, X=percentile (0..100)
 -set_prob        misc 5 args X/Y forecasts Z=Code Table 4.9 A=lower limit B=upper limit
 -set_radius      misc X      set radius of Earth X= 0,2,4,5,6,8,9 (Code Table 3.2), 1:radius , 7:major:minor
 -set_scaling     misc X Y    set decimal scaling=X binary scaling=Y for grib_out packing
 -set_sec_size    misc X Y    resizes section , X=section number, Y=size in octets, DANGEROUS
 -set_ts_dates    misc X Y Z  changes date code for time series X=YYYYMMDDHH(mmss) Y=dtime Z=#msgs/date
 -set_var         misc X      changes variable name
 -status          misc X      X arbitrary
 -submsg          misc X      process submessage X (0=process all messages)
 -sys             misc X      run system/shell command, X=shell command
 -text_col        misc X      number of columns on text output
 -text_fmt        misc X      format for text output (C)
 -udf             misc X Y    run UDF, X=program+optional_args, Y=return file
 -udf_arg         misc X Y    add grib-data to UDF argument file, X=file Y=name
 -undefine        misc X Y Z  sets grid point values to undefined X=(in-box|out-box) Y=lon0:lon1 Z=lat0:lat1
 -undefine_val    misc X      grid point set to undefined if X=val or X=low:high
 -v               misc        verbose (v=1)
 -v0              misc        not verbose (v=0)
 -v1              misc        verbose (v=1)
 -v2              misc        really verbose (v=2)
 -v98             misc        verbose mode for debugging only (v=98)
 -v99             misc        verbose mode for debugging only (v=99)
 -version         misc        print version
 -AAIG            out         writes Ascii ArcInfo Grid file, lat-lon grid only (alpha)
 -AAIGlong        out         writes Ascii ArcInfo Grid file, lat-lon grid only long-name *.asc (alpha)
 -ave             out  X Y    average X=time step, Y=output grib file needs file is special order
 -bin             out  X      write binary data to X
 -cress_lola      out  X..Z,A lon-lat grid values X=lon0:nlon:dlon Y=lat0:nlat:dlat Z=file A=radius1:radius2:..:radiusN
 -csv             out  X      make comma separated file, X=file (WxText enabled)
 -fcst_ave        out  X Y    average X=time step, Y=output grib file needs file is special order
 -fi              out         null output operation
 -grib            out  X      writes GRIB record (one submessage) to X
 -GRIB            out  X      writes entire GRIB record (all submessages)
 -grib_ieee       out  X      writes data[] to X.grb, X.head, X.tail, and X.h
 -grib_out        out  X      writes decoded/modified data in grib-2 format to file X
 -grib_out_irr    out  X Y    writes irregular grid grib X=(all|defined) Y=(output file)
 -gridout         out  X      text file with grid: i j lat lon (1st record)
 -ieee            out  X      write (default:big-endian) IEEE data to X
 -ijbox           out  X..Z,A grid values in bounding box X=i1:i2[:di] Y=j1:j2[:dj] Z=file A=[bin|text|spread]
 -ijsmall_grib    out  X Y Z  make small domain grib file X=ix0:ix1 Y=iy0:iy1 Z=file
 -irr_grid        out  X Y Z  make irregular grid, nearest neighbor, X=lon-lat list Y=radius (km) Z=output grib file
 -lola            out  X..Z,A lon-lat grid values X=lon0:nlon:dlon Y=lat0:nlat:dlat Z=file A=[bin|text|spread|grib]
 -merge_fcst      out  X Y    merge forecast ave/acc/min/max X=number to intervals to merge (0=every) Y=output grib file
 -mysql           out  5 args H=[host] U=[user] P=[password] D=[db] T=[table] (alpha)
 -mysql_dump      out  7 args H=[host] U=[user] P=[password] D=[db] T=[table] W=[western_lons:0|1] PV=[remove unlikely:0|1]
 -mysql_speed     out  7 args H=[host] U=[user] P=[password] D=[db] T=[table] W=[western_lons:0|1] PV=[remove unlikely:0|1]
 -ncep_norm       out  X      normalize NCEP-type ave/acc X=output grib file
 -ncep_uv         out  X      combine U and V fields into one message like NCEP operations
 -netcdf          out  X      write netcdf data to X
 -new_grid        out  X..Z,A bilinear interpolate: X=projection Y=x0:nx:dx Z=y0:ny:dy A=grib_file alpha
 -small_grib      out  X Y Z  make small domain grib file X=lonW:lonE Y=latS:latN Z=file
 -spread          out  X      write text - spread sheet format into X (WxText enabled)
 -submsg_uv       out  X      combine vector fields into one message
 -text            out  X      write text data into X
 -tosubmsg        out  X      convert GRIB message to submessage and write to file X
 -wind_dir        out  X      calculate wind direction, X = output gribfile (direction in degrees, 0=wind from north, 90=wind from east)
 -wind_speed      out  X      calculate wind speed, X = output gribfile (U then V in datafile)
 -append          init        append mode, write to existing output files
 -crlf            init        make the end of the inventory a crlf (windows) instead of newline (unix)
 -d               init X      dump message X (n or n.m), only 1 -d allowed
 -egrep           init X      egrep X | wgrib2 (X is POSIX regular expression)
 -egrep_v         init X      egrep -v X | wgrib2 (X is POSIX regular expression)
 -eof_bin         init X Y    send (binary) integer to file upon EOF: X=file Y=integer
 -eof_string      init X Y    send string to file upon EOF: X=file Y=string
 -err_bin         init X Y    send (binary) integer to file upon err exit: X=file Y=integer
 -err_string      init X Y    send string to file upon err exit: X=file Y=string
 -fgrep           init X      fgrep X | wgrib2
 -fgrep_v         init X      fgrep -v X | wgrib2
 -fix_ncep_2      init        ncep bug fix 2, probability observation < -ve number
 -fix_ncep_3      init        sets flag to fix ncep bug 3 (constant fields)
 -fix_ncep_4      init        fixes NCEP grib2 files where DX and DY are undefined
 -flush           init        flush output buffers after every write (interactive)
 -for             init X      process record numbers in range, X=(start:end:step), only one -for allowed
 -for_n           init X      process inv numbers in range, X=(start:end:step), only one -for allowed
 -g2clib          init X      X=0/1/2 0=WMO std 1=emulate g2clib 2=use g2clib
 -i               init        read Inventory from stdin
 -i_file          init X      read Inventory from file
 -inv             init X      write inventory to X
 -match           init X      process data that matches X (POSIX regular expression)
 -match_fs        init X      process data that matches X (fixed string)
 -nc3             init        use netcdf3 (classic)
 -nc4             init        use netcdf4 (compressed, controlled endianness etc)
 -nc_grads        init        require netcdf file to be grads v1.9b4 compatible (fixed time step only)
 -nc_nlev         init X      netcdf, X = max LEV dimension for {TIME,LEV,LAT,LON} data
 -nc_pack         init X      pack/check limits of all NEW input variables, X=min:max[:byte|short|float]
 -ncpu            init X      number of threads, default is environment variable OMP_NUM_THREADS/number of cpus
 -nc_table        init X      X is conversion_to_netcdf_table file name
 -nc_time         init X      netcdf, [[-]yyyymmddhhnnss]:[dt{s[ec]|m[in]|h[our]|d[ay]}], [-] is for time alignment only
 -no_append       init        not append mode, write to new output files (default)
 -no_flush        init        flush output buffers when full (default)
 -no_nc_grads     init        netcdf file may be not grads v1.9b4 compatible, variable time step
 -no_nc_pack      init        no packing in netcdf for NEW variables
 -no_nc_table     init        disable previously defined conversion_to_netcdf_table
 -no_nc_time      init        netcdf, disable previously defined initial or relative date and time step
 -not             init X      process data that does not match X (POSIX regular expression)
 -not_fs          init X      process data that does not match X (fixed string)
 -one_line        init        puts all on one line (makes into inventory format)
 -order           init X      decoded data in X (raw|we:sn|we:ns) order, we:sn is default
 -persistent      init X      makes file X persistent if already opened (default on open), CW2
 -rewind_init     init X      rewinds file X on initialization if already opened, CW2
 -set_ext_name    init X      X=0/1 extended name on/off
 -set_regex       init X      set regex mode X = 0:extended regex (default) 1:pattern 2:extended regex & quote metacharacters
 -tigge           init        use modified-TIGGE grib table
 -transient       init X      make file X transient, CW2
